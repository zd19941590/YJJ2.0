#import "RCTPhotoBrowser.h"
#if __has_include(<React/RCTUtils.h>)
#import <React/RCTUtils.h>
#import <React/RCTBridge.h>
#import <React/UIView+React.h>
#else
#import "RCTUtils.h"
#import "RCTBridge.h"
#import "UIView+React.h"
#endif
#import "AFPhotoBrowser+RCT.h"
#import "PhotoTransfer.h"
#import <AFPhoto.h>
@implementation RCTPhotoBrowser {
  __weak RCTBridge *_bridge;
  BOOL _isPresented;
  AFPhotoBrowser *_photoBrowser;
    BOOL _isPhotoBrowserAdded;
}

RCT_NOT_IMPLEMENTED(- (instancetype)initWithFrame:(CGRect)frame)
RCT_NOT_IMPLEMENTED(- (instancetype)initWithCoder:coder)

- (instancetype)initWithBridge:(RCTBridge *)bridge {
  	if (self == [super initWithFrame:CGRectZero]) {
    	_bridge = bridge;
        _isPhotoBrowserAdded = NO;
        
    	_photoBrowser = [[AFPhotoBrowser alloc] initWithDelegate:self];
        _photoBrowser.displayNavigationBar = NO;
        
//        UINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:_photoBrowser];
//        nc.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
//
//        UIView *containerView = [UIView new];
//        containerView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
////        _photoBrowser.view = containerView;
//        [containerView addSubview:_photoBrowser.view];
        
        _isPresented = NO;
        _photos = [[NSMutableArray alloc] init];
        _thumbs = [[NSMutableArray alloc] init];
        
         _photoBrowser.view.frame = self.bounds;
        [self addSubview:_photoBrowser.view];
  	}
  	return self;
}

- (void)didMoveToSuperview {
      [super didMoveToSuperview];
      if (_isPresented && !self.superview) {
        [self dismissModalViewController];
      }
}

- (void)didMoveToWindow {
  [super didMoveToWindow];
    
//    [_photoBrowser reloadData];
    
//  if (!self.userInteractionEnabled && ![self.superview.reactSubviews containsObject:self]) {
//    return;
//  }
//
//  if (!_isPresented && self.window) {
//    RCTAssert(self.reactViewController, @"Can't present modal view controller without a presenting view controller");
//
//#if !TARGET_OS_TV
//    // _photoBrowser.supportedInterfaceOrientations = [self supportedOrientationsMask];
//#endif
//    if ([self.animationType isEqualToString:@"fade"]) {
//      _photoBrowser.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
//    } else if ([self.animationType isEqualToString:@"slide"]) {
//      _photoBrowser.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
//    }
//    if (self.presentationStyle != UIModalPresentationNone) {
//      _photoBrowser.modalPresentationStyle = self.presentationStyle;
//    }
//    [_delegate presentPhotoBrowser:self withViewController:_photoBrowser animated:[self hasAnimationType]];
//
//    _isPresented = YES;
//  }
}

- (void)dismissModalViewController {
      if (_isPresented) {
        [_delegate dismissPhotoBrowser:self withViewController:_photoBrowser animated:[self hasAnimationType]];
        _isPresented = NO;
      }
}

- (BOOL)hasAnimationType {
	return ![self.animationType isEqualToString:@"none"];
}

#if !TARGET_OS_TV
//- (UIInterfaceOrientationMask)supportedOrientationsMask {
//  if (_supportedOrientations.count == 0) {
//    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
//      return UIInterfaceOrientationMaskAll;
//    } else {
//      return UIInterfaceOrientationMaskPortrait;
//    }
//  }
//
//  UIInterfaceOrientationMask supportedOrientations = 0;
//  for (NSString *orientation in _supportedOrientations) {
//    if ([orientation isEqualToString:@"portrait"]) {
//      supportedOrientations |= UIInterfaceOrientationMaskPortrait;
//    } else if ([orientation isEqualToString:@"portrait-upside-down"]) {
//      supportedOrientations |= UIInterfaceOrientationMaskPortraitUpsideDown;
//    } else if ([orientation isEqualToString:@"landscape"]) {
//      supportedOrientations |= UIInterfaceOrientationMaskLandscape;
//    } else if ([orientation isEqualToString:@"landscape-left"]) {
//      supportedOrientations |= UIInterfaceOrientationMaskLandscapeLeft;
//    } else if ([orientation isEqualToString:@"landscape-right"]) {
//      supportedOrientations |= UIInterfaceOrientationMaskLandscapeRight;
//    }
//  }
//  return supportedOrientations;
//}
#endif

#pragma mark -
#pragma mark - Photo Browser Control

- (void)setBackgroundColor:(NSString *)backgroundColor {
    _photoBrowser.backgroundColor = [UIColor grayColor];
}

- (void)setPhotos:(NSMutableArray *)photos {
    NSAssert([photos count], @"Browser photos maybe nil, initial with at least one image.");
    
    if ([_photos count]) { [_photos removeAllObjects]; }
    
    for (NSArray *arr in photos) {
        NSMutableArray * insertion = [NSMutableArray arrayWithCapacity:arr.count];
        for (id photo in arr) {
            if ([photo hasPrefix:@"file:"] || [photo hasPrefix:@"http:"] || [photo hasPrefix:@"https:"]) {
                [insertion addObject:[AFPhoto photoWithURL:[NSURL URLWithString:photo]]];
            } else {
                [insertion addObject:[AFPhoto photoWithImage:[UIImage imageNamed:photo]]];
            }
        }
        [_photos addObject:insertion];
    }
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self->_photoBrowser reloadData];
    });
}

- (void)setThumbs:(NSMutableArray *)thumbs {
    NSAssert([thumbs count], @"Browser thumbs maybe nil, initial with at least one image.");
    
    if ([_thumbs count]) { [_thumbs removeAllObjects]; }
    
    for (NSArray *arr in thumbs) {
        NSMutableArray * insertion = [NSMutableArray arrayWithCapacity:arr.count];
        for (id photo in arr) {
            if ([photo hasPrefix:@"file:"] || [photo hasPrefix:@"http:"] || [photo hasPrefix:@"https:"]) {
                [insertion addObject:[AFPhoto photoWithURL:[NSURL URLWithString:photo]]];
            } else {
                [insertion addObject:[AFPhoto photoWithImage:[UIImage imageNamed:photo]]];
            }
        }
        [_thumbs addObject:insertion];
    }
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self->_photoBrowser reloadData];
    });
}

- (void)setCurrentPosition:(NSDictionary *)json {
    _currentPosition = json;
    
    // Make sure this method perform in main thread.
    
    dispatch_async(dispatch_get_main_queue(), ^{
        if (self->_photoBrowser) {
            NSUInteger section = [json[@"section"] unsignedIntegerValue];
            NSUInteger index = [json[@"index"] unsignedIntegerValue];
            [self->_photoBrowser setCurrentPhotoIndex:index section:section];
        }
    });
}

- (void)setCurrentSection:(NSUInteger)section index:(NSUInteger)index {
    [_photoBrowser setCurrentPhotoIndex:index section:section];
}

- (void)startCarousel {
    [_photoBrowser startCarousel];
}

- (void)cancelCarousel {
    [_photoBrowser cancelCarousel];
}

#pragma mark -
#pragma mark - RCTInvalidating

- (void)invalidate {
      dispatch_async(dispatch_get_main_queue(), ^{
        [self dismissModalViewController];
      });
}

#pragma mark -
#pragma mark - AFPhotoBrowserDelegate

- (NSUInteger)numberOfSectionsInPhotoBrowser:(AFPhotoBrowser *)photoBrowser {
    if ([_photos count]) return [_photos count];
    return 0;
}

- (NSUInteger)photoBrowser:(AFPhotoBrowser *)photoBrowser numberOfPagesInSection:(NSUInteger)section {
    if (section < [_photos count]) {
        NSMutableArray *arr = [_photos objectAtIndex:section];
        if ([arr count]) return [arr count];
        return 0;
    }
    return 0;
}

- (id<AFPhoto>)photoBrowser:(AFPhotoBrowser *)photoBrowser photoAtIndex:(NSUInteger)index section:(NSUInteger)section {
    if ([_photos count] && [[_photos objectAtIndex:section] count])
    	return [_photos[section] objectAtIndex:index];
    return nil;
}

- (id<AFPhoto>)photoBrowser:(AFPhotoBrowser *)photoBrowser thumbPhotoAtIndex:(NSUInteger)index section:(NSUInteger)section {
    return [AFPhoto photoWithImage:[UIImage imageNamed:@"pic-404"]];
}

- (void)photoBrowser:(AFPhotoBrowser *)photoBrowser didDisplaySectionAtIndex:(NSUInteger)index {
    NSLog(@"ðŸ”µ Did start viewing section %lu", (unsigned long)index);
}

- (void)photoBrowser:(AFPhotoBrowser *)photoBrowser didDisplayPhotoAtIndex:(NSUInteger)index section:(NSUInteger)section {
    NSLog(@"ðŸ”´ Did start viewing photo at index %lu %lu", (unsigned long)section, (unsigned long)index);
    
    AFPhoto *photo;
    if (section <= _photos.count && index <= [_photos[section] count]) {
        photo = _photos[section][index];
    }
    
    NSDictionary *body = @{
                           @"section" : @(section),
                           @"index" : @(index),
                           @"photo" : photo.photoURL.absoluteString ?: [NSNull null]
                           };
    !self.onDidChangePosition ?: self.onDidChangePosition(body);
}

- (void)photoBrowser:(AFPhotoBrowser *)photoBrowser didEndDisplaySectionAtIndex:(NSUInteger)index {
    NSDictionary *body = @{
                           @"section" : @(index)
                           };
    !self.onEndChangePosition ?: self.onEndChangePosition(body);
}

- (void)photoBrowser:(AFPhotoBrowser *)photoBrowser singleTapAtIndex:(NSUInteger)index section:(NSUInteger)section {
    NSDictionary *body = @{
                           @"section" : @(section),
                           @"index" : @(index),
                           @"image" : @""
                           };
    !self.onDidSingleTapAtPosition ?: self.onDidSingleTapAtPosition(body);
}

- (void)photoBrowser:(AFPhotoBrowser *)photoBrowser doubleTapAtIndex:(NSUInteger)index section:(NSUInteger)section {
    NSDictionary *body = @{
                           @"section" : @(section),
                           @"index" : @(index),
                           @"image" : @""
                           };
    !self.onDidDoubleTapAtPosition ?: self.onDidDoubleTapAtPosition(body);
}

@end
